#!/usr/bin/env python3
# vim: set fileencoding=utf-8 :

from urllib.parse import urlencode
from urllib.request import Request, urlopen
import json
import datetime
import configparser
import sys
config = configparser.ConfigParser()
config.read('/etc/yddns.ini')

LOG_FILE = 'ddns.log'  # Лог
SUBDOMAINS = ['@','*']
 

def patchIp(domain, token, recordid, subdomain, content, lastip):
    # Готовим POST-запрос
    url = 'https://pddimp.yandex.ru/api2/admin/dns/edit'
    post_fields = {
	'subdomain': subdomain,
        'domain': domain,      
        'record_id': recordid, 
        'content': content
#        'token': token
        }    
    print("patch >>>")
    print(post_fields)
    request = Request(url, urlencode(post_fields).encode(), headers = {'PddToken':token})
    data = urlopen(request).read().decode()
    result = json.loads(data)
    print("result >>>")
    print(result)

    # Ожидаем, что всё в порядке
    assert result['success']=='ok', result

    # Сохраняем IP в файл
    print(content, file=open(lastip, mode='tw'))

    # Пишем об изменении в лог
    d=datetime.datetime.now()
    print(d.strftime("%Y-%m-%d %H:%M:%S"), ip, file=open(LOG_FILE, mode='ta'))
 
def getMyIp(service, lastip):
	# Считываем текущий IP адрес
	# Можно добавить ещё проверку, что мы получили именно IP, а не что-то ещё.
	ip = urlopen(service).read().decode().strip()

	# Считываем из файла IP, который был записан в DNS последний раз.
	# Можно, конечно это не делать, но я считаю нехорошо нагружать Яндекс лишними операциями.
	try:
	    last_ip = open(lastip, mode='tr').read().strip()
	except FileNotFoundError:
	    last_ip = ""
	if last_ip != ip:
		return ip
	else:
		return None

def processDomain(domain, token, ip, rtype, lastip):
	contentreq = Request('https://pddimp.yandex.ru/api2/admin/dns/list?domain='+domain, headers = {'PddToken':token})
	contents = json.loads(urlopen(contentreq).read().decode().strip())

	for record in contents['records']:
		if (record['subdomain'] in SUBDOMAINS and record['type'] == rtype):
			print(record)
			try:
				patchIp(domain, token, record['record_id'], record['subdomain'], ip, lastip)
			except:
				pass

 

for section in config.sections():
	print(section)
	sect=config[section]
	ip=getMyIp(sect['getip'], sect['lastip'])
	if ip!=None:
		processDomain(sect['domain'], sect['token'], ip, sect['type'], sect['lastip'])


 
